name: Deploy to Production

on:
  push:
    branches:
      - main

permissions:
  contents: write
  pull-requests: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14.17'

      - name: Install dependencies
        run: npm install

      #     - name: Run linting and tests
      #       run: |
      #         npm run lint  # Adjust to your linting scripts
      #         npm test

      - name: Read and increment version
        id: version
        run: |
          if [ ! -f VERSION ]; then echo "0" > VERSION; fi
          CURRENT_VERSION=$(cat VERSION)
          NEXT_VERSION=$((CURRENT_VERSION + 1))
          echo $NEXT_VERSION > VERSION
          echo "version=$NEXT_VERSION" >> $GITHUB_ENV

      - name: Commit updated version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.email "fiapburger.tech@gmail.com"
          git config --global user.name "FiapBurger"
          git add VERSION
          git commit -m "chore: increment version to ${{ env.version }}"
          git push origin main

      - name: Build project
        run: npm run build  # Certifique-se de que este comando est√° correto para o seu projeto

      - name: Build Docker image
        run: |
          docker build -t alexcesarnascimento/ms-produto:${{ env.version }} .

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push Docker image to Docker Hub
        run: |
          docker push alexcesarnascimento/ms-produto:${{ env.version }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Install kubectl
        run: |
          sudo apt-get update && sudo apt-get install -y kubectl

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name cluster-fiap --region us-east-1

      - name: Deploy to Kubernetes/EKS
        run: |
          sed -i 's|alexcesarnascimento/ms-produto:.*|alexcesarnascimento/ms-produto:${{ env.version }}|' kubernetes/ms-produto.deployment.yaml
          kubectl apply -f kubernetes/ms-produto.namespace.yaml
          kubectl apply -f kubernetes/mongodb.configmap.yaml
          kubectl apply -f kubernetes/mongodb.secret.yaml
          kubectl apply -f kubernetes/ms-produto.svc.yaml
          kubectl apply -f kubernetes/ms-produto.deployment.yaml
          kubectl apply -f kubernetes/mongodb.deployment.yaml

      - name: Notify deployment success
        run: echo "Deployment successful!"
